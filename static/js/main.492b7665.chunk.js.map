{"version":3,"sources":["containers/Questions.js","components/Players.js","containers/Game.js","App.js","serviceWorker.js","config.js","index.js"],"names":["colors","Question","props","className","questions","map","data","QuestionCard","id","onClick","e","handleQSelection","target","styled","div","Math","floor","random","length","randomColor","Players","players","LobbyWrapper","HeaderWrapper","PlayerWrapper","user","Player","style","color","p","Game","useState","showCopy","setShowCopy","GridWrapper","Copied","Col","flexGrow","header","description","showQs","newQs","setQuestion","FormControl","size","type","placeholder","onChange","value","handleQuestionSubmit","Button","admin","readyStart","startRound","question","myTurn","finishQuestion","answerer","handleSelection","potentialAns","pickNextUser","innerText","maxWidth","gameId","RoomWrapper","RoomID","dummy","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","setTimeout","copyToClipboard","span","App","setId","startGame","setGameStart","nickname","setNickname","setPotentialAns","potentialQs","setPotentialQs","currAnswerer","setCurrAnswerer","currQuestion","setCurrQuestion","currQuestionID","setCurrQuestionID","gameState","setGameState","setAdmin","setPlayers","setMyTurn","setNewQs","readyToStart","setReadyToStart","gameEnd","setGameEnd","ws","useRef","handleGenerate","roundId","result","characters","charactersLength","i","charAt","makeid","current","send","JSON","stringify","alert","useEffect","WebSocket","onmessage","parse","users","console","log","numQuestions","numPlayers","options","qs","questionIDs","questionsRemaining","onerror","onopen","close","PlayerHeader","AdminHeader","renderStages","NickNameWrapper","NewGameWrapper","JoinGameWrapper","Boolean","window","location","hostname","match","REGION","BUCKET","URL","USER_POOL_ID","APP_CLIENT_ID","IDENTITY_POOL_ID","Amplify","configure","Auth","mandatorySignIn","region","config","userPoolId","identityPoolId","userPoolWebClientId","Storage","bucket","API","endpoints","name","endpoint","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.492b7665.chunk.js","sourcesContent":["import React from \"react\";\nimport {Button} from \"react-bootstrap\";\nimport styled from \"styled-components\"\n\nconst colors = ['#264653', '#2A9D8F', '#E9C46A', '#F4A261', '#E76F51']\n\n\nfunction random_color() {return colors[Math.floor(Math.random() * colors.length)]}\n\nexport default function Question(props) {\n  return (\n    <div className=\"questions\">\n      {props.questions && props.questions.map(data => \n          <QuestionCard id={data} onClick={e=> props.handleQSelection(e.target.id)}>\n          </QuestionCard>\n      )}\n    </div>\n  );\n}\n\nconst QuestionCard = styled.div`\n    width: 100px;\n    height: 100px;\n    max-height: 100px;\n    max-width: 100px;\n    min-height: 100px;\n    min-width: 100px;\n    border-radius: 5px;\n    margin: 15px;\n    background-color: ${random_color};\n    opacity: 0.5;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n    transition: all 0.3s cubic-bezier(.25,.8,.25,1);\n\n    &:hover {\n        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n    }\n`\n\n","import React from 'react'\nimport styled from 'styled-components'\n \nfunction randomColor() {\n  let colors = [\"#264653\", \"#2A9D8F\", \"#E9C46A\", \"#F4A261\", \"#E76F51\"];\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\nfunction randomColor2() {\n  let colors=[\"#ADD9EB\", \"#BDEFEA\", \"#EAD6A2\", \"#E7C4A6\", \"#E5B0A2\"]\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\n\nexport default function Players(props) {\n  const players = props.players\n  return (\n    <LobbyWrapper>\n      <HeaderWrapper> <b> Players </b> </HeaderWrapper>\n      <PlayerWrapper>\n      {players.length > 0 ? players.map(user => <Player style={{color: randomColor()}}> {user} </Player>) : <> None </>}\n      </PlayerWrapper>\n    </LobbyWrapper>\n  );\n}\n\nconst HeaderWrapper = styled.p`\n    font-size: 16px;\n    color: ${randomColor}; \n    -webkit-text-stroke-width: 0.2px;\n    -webkit-text-stroke-color: black;\n`\n\nconst LobbyWrapper = styled.div`\n    background-color: ${randomColor2}; \n    opacity: 1;\n    margin: 1rem 0rem;\n    border-radius: 1rem;\n    width: 100%;\n    padding: 1rem;\n    text-align: center;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n    transition: all 0.3s cubic-bezier(.25,.8,.25,1);\n\n    &:hover {\n        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n    }\n    \n`\nconst PlayerWrapper = styled.div`\n    -webkit-text-stroke-width: 0.2px;\n    -webkit-text-stroke-color: black;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    font-weight: 600;\n`\nconst Player = styled.div`\n    padding: 1em;\n`\n","import React, {useState} from 'react'\nimport styled from 'styled-components'\nimport Questions from './Questions'\nimport Players from '../components/Players'\nimport { Button, FormControl } from 'react-bootstrap'\n\n\nexport default function Game(props) {\n    const [showCopy, setShowCopy] = useState(false)\n\n  function copyToClipboard() {\n    var dummy = document.createElement(\"input\");\n    document.body.appendChild(dummy);\n    dummy.setAttribute('value', props.gameId);\n    dummy.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(dummy);\n    setShowCopy(true)\n    setTimeout(() => {\n      setShowCopy(false)\n    }, 3000);\n  }\n\n  function toggleShowCopy(){ setShowCopy(!showCopy)}\n\n  return (\n    <GridWrapper>\n        {showCopy && \n        <Copied>\n            Copied to clipboard!\n        </Copied>}\n        <Col style={{flexGrow: 1}}>\n          <h1> {props.header} </h1>\n          {props.description && <b> {props.description} </b>}\n          {props.showQs && <div> This just in: <b>{props.newQs}</b> </div>}\n          {props.setQuestion && <FormControl size=\"lg\" type=\"text\" id=\"ask\" placeholder=\"Ask a question\" onChange={e => props.setQuestion(e.target.value)}/>}\n          {props.handleQuestionSubmit && <Button onClick={() => props.handleQuestionSubmit()}> submit </Button>}\n          {(props.admin===true && props.readyStart) && <Button onClick={props.startRound}>Start the answerin!</Button>}\n          {props.question && <h3> Question: {props.question} </h3>}\n          {props.myTurn && \n              <>\n              <div> <b> You are answering! </b></div>\n              <Button id=\"finishans\" onClick={props.finishQuestion}> Finish Answering </Button>\n              </>\n          }\n          {(props.answerer && !props.myTurn) && <p> Current Answerer: {props.answerer} </p>}\n          {props.questions && <Questions questions={props.questions} handleQSelection={e => props.handleSelection(e)}/>}\n          {props.potentialAns && props.potentialAns.map(data => <Button onClick={(e) => props.pickNextUser(e.target.innerText)}>{data}</Button>)}\n        </Col>\n        <Col style={{maxWidth: \"30%\"}}>\n            <Players players={props.players}/>\n            {props.gameId && \n            <RoomWrapper> You are in room \n                <RoomID id=\"copy\" onClick={() => copyToClipboard()}> <b>{props.gameId} 📋</b> </RoomID> \n            </RoomWrapper>\n            }\n        </Col>\n    </GridWrapper>\n  )\n}\n\nconst RoomID = styled.span`\n  margin: 5px;\n  padding: 5px;\n  font-size: 24px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n  transition: all 0.3s cubic-bezier(.25,.8,.25,1); \n  border-radius: 10px;\n  cursor: pointer;\n  white-space: pre;\n  &:hover {\n    transform: scale(1.2);\n    box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n  }\n`\n\nconst Copied = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n    background-color: white;\n    padding: 10px;\n    margin: 15px;\n    border-radius: 5px;\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n`\n\nconst RoomWrapper = styled.div`\n    margin-top: 20px;\n    font-size: 18px;\n    width: auto;\n`\n\nconst GridWrapper = styled.div`\n    display: flex;\n    justify-content: space-between\n`\n\nconst Col = styled.div`\n    min-width: 30%;\n    text-align: left;\n    padding: 1rem;\n`\n\nconst RightCol = styled.div`\n    margin-left: 2rem;\n    float: left;\n    width: 50%;\n`\n","import React, {useEffect, useState, useRef} from \"react\";\nimport { FormControl, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Questions from './containers/Questions';\nimport styled from 'styled-components';\nimport Players from './components/Players';\nimport Game from './containers/Game';\n\nexport default function App() {\n  const [gameId, setId] = useState(\"\");\n  const [startGame, setGameStart] = useState(false) // players have all joined, start game \n  const [nickname, setNickname] = useState('')\n  const [question, setQuestion] = useState('')\n  const [generateGame, setGenerateGame] = useState(false)\n  const [potentialAns, setPotentialAns] = useState([])\n  const [potentialQs, setPotentialQs] = useState([])\n  const [currAnswerer, setCurrAnswerer] = useState(\"\")\n  const [currQuestion, setCurrQuestion] = useState(\"\")\n  const [currQuestionID, setCurrQuestionID] = useState(\"\")\n  const [gameState, setGameState] = useState(\"submit\")\n  const [admin, setAdmin] = useState(false)\n  const [players, setPlayers] = useState([])\n  const [myTurn, setMyTurn] = useState(false)\n  const [newQs, setNewQs] = useState(\"\")\n  const [readyToStart, setReadyToStart] = useState(false)\n  const [gameEnd, setGameEnd] = useState(false)\n\n  function renderStages(gameState) {\n    switch(gameState) {\n      case 'submit': return ( \n        <Game header=\"❓ What's Your Question?\"\n            gameId={gameId}\n            handleQuestionSubmit={()=>handleQuestionSubmit()}\n            setQuestion={setQuestion}\n            players={players}\n        />\n      );\n      case 'waitsubmit': return (\n        <Game header={readyToStart ? \"🌟 All Questions are in\" : \"🙋 Waiting for Players to Submit Questions\"}\n            description={readyToStart ? \"The game is afoot\" : \"*cue jeopardy theme song*\"}\n            gameId={gameId}\n            startRound={() => startRound()}\n            admin={admin}\n            players={players}\n            newQs={newQs}\n            showQs={true}\n            readyStart={readyToStart}\n        />\n      );\n      case 'waitanswer': return (\n          <Game header={\"🔎 \" + currAnswerer + \" is picking a question!\"}\n              description=\"doo be doo\"\n              gameId={gameId}\n              players={players}\n          />\n      ); \n      case 'answer': return (\n        <Game header={myTurn ? \"🎙️ Answer on Zoom for Everyone!\" : \"🗣️ \" +  currAnswerer + \" has chosen!\"}\n            description={myTurn ? \"Be honest... ;)\" : \"Pay attention to the Zoom for their answer!\"}\n            gameId={gameId}\n            question={currQuestion}\n            myTurn={myTurn}\n            finishQuestion={finishQuestion}\n            // answerer={currAnswerer}\n            players={players}\n        />\n      ); \n      case 'pickquestion': return(\n        <Game header=\"🤔 Choose a Question\"\n            description=\"no peeking!\"\n            gameId={gameId}\n            questions={potentialQs}\n            handleSelection={e=> handleQSelection(e)}\n            players={players}\n        />\n      );\n      case 'pickplayer': return(\n        <Game header=\"🥔 Hot Potato\"\n            description=\"Choose a player to Answer next\"\n            gameId={gameId}\n            potentialAns={potentialAns}\n            pickNextUser={pickNextUser}\n            players={players}\n        />\n      );\n      default: return (\n        <Game header={\"💔 uh oh, you've broken the game. Please refresh and rejoin room \" + gameId}\n        />\n      );\n    }\n  }\n\n  const ws = useRef(null)\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://g4lpvfv7x5.execute-api.us-east-2.amazonaws.com/dev\")\n    try {\n      ws.current.onmessage = (e) => {\n        const data = JSON.parse(e.data)\n        const messageType = data.type\n        switch(messageType) {\n          case \"newPlayer\": \n            setPlayers(data.users)\n            break;\n          // returns all people that can still play\n          case \"newQuestion\": \n            console.log(\"new question\" ,data)\n            setNewQs(data.question)\n            if (data.numQuestions == data.numPlayers){\n              setReadyToStart(true);\n            }\n            break;\n          case \"pickAnswerer\":  \n            setPotentialAns(data.options) \n            setMyTurn(false)\n            break;\n          // returns all questions that can still be answered\n          case \"pickQuestion\":  \n            const qs = data.questionIDs\n            setMyTurn(true)\n            setPotentialQs(qs)\n            setGameState(\"pickquestion\")\n            break;\n          // returns whoever has been selected to answer next\n          case \"nextAnswerer\": \n            setCurrAnswerer(data.answerer)\n            setGameState(\"waitanswer\")\n            break;\n          // returns the question to be answered now\n          case \"question\": \n            if(data.questionsRemaining > 0) {\n              setCurrQuestion(data.question)\n              setGameState(\"answer\")\n            }\n            else {\n              setGameEnd(true)\n              setCurrQuestion(data.question)\n              setGameState(\"answer\")\n            }\n            break;\n          case \"roundEnd\": \n              setGameEnd(false)\n              setGameState(\"submit\")\n          default: \n        }\n      }\n      ws.current.onerror = (e) => {\n        console.log(\"error: \", e)\n      }\n      ws.current.onopen = e => {\n        console.log(\"connected: \", e)\n      }\n    }\n    catch(e) {console.log(\"error: \", e) }\n  }, []);\n\n  useEffect(() => { \n    if (currQuestionID !== \"\") {\n       ws.current.send(JSON.stringify({\"action\": \"askQuestion\", \"questionID\": `${currQuestionID}`}))\n    }\n  }, [currQuestionID])\n\n  useEffect(() => () => {ws.current.close()}, [ws])\n\n  function startRound() {\n    ws.current.send(JSON.stringify({\"action\": \"startGame\"}))\n  }\n\n  function handleGenerate() {\n    if (nickname !== \"\") {\n      const roundId = makeid(5)\n      setId(roundId)\n      setAdmin(true)\n      ws.current.send(JSON.stringify({\"action\": \"updateUserInfo\", \"roundID\": `${roundId}`, \"username\": `${nickname}`}))        \n      \n      setGameStart(true)\n      // need to push nickname, connect to real-time and store connection id in state\n      // also need to initialize roundid in connectionid\n      // ** how are we going to show the other players that have joined the lobby? **\n    }\n    else {\n        alert(\"Please enter a nickname\")\n    }\n  }\n\n  function handleJoinGame() {\n    if (nickname !== \"\") {\n        setGameStart(true)\n        ws.current.send(JSON.stringify({\"action\": \"updateUserInfo\", \"roundID\": `${gameId}`, \"username\": `${nickname}`})) \n\n       ws.current.send(JSON.stringify({\"action\": \"getPotentialAnswerers\"} ))\n      // need to push nickname, connect to real-time and store connection id in state\n      // need to store roundin in connection id to query others users\n    }\n\n    else {\n        alert(\"Please enter a nickname\")\n    }\n  }\n\n  function handleQuestionSubmit() {\n    ws.current.send(JSON.stringify({\"action\": \"createQuestion\", \"question\": `${question}`}))\n    setGameState(\"waitsubmit\")\n  }\n\n  function handleQSelection(questionID) {\n    setCurrQuestionID(questionID) \n  }\n\n  function finishQuestion() {\n    if (gameEnd===false){\n      setGameState(\"pickplayer\")\n      ws.current.send(JSON.stringify({\"action\": \"getPotentialAnswerers\"}))\n    }\n    else  ws.current.send(JSON.stringify({\"action\": \"endRound\"}))\n  }\n\n  function pickNextUser(user) {\n    ws.current.send(JSON.stringify({\"action\": \"setAnswerer\", \"answerer\": `${user}`}))  \n  }\n\n\n// UTILITY FUNCTIONS // \n  function makeid(length) {\n     var result           = '';\n     var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n     var charactersLength = characters.length;\n     for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  function copyToClipboard() {\n    var dummy = document.createElement(\"input\");\n    document.body.appendChild(dummy);\n    dummy.setAttribute('value', gameId);\n    dummy.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(dummy); \n  };\n// UTILITY FUNCTIONS // \n  \n  if (!startGame) return (\n    <div className=\"App container\">\n        <LobbyWrapper>\n          <h1> 💁 Personal Trivia </h1> \n          {nickname && \n            <h2> Welcome {nickname} </h2>\n          }\n          {!nickname && \n            <h2> Enter nickname to get started: {nickname} </h2>\n          }\n        <NickNameWrapper>\n          <FormControl size=\"lg\" type=\"text\" id=\"nickname\" placeholder=\"Nickname\" onChange={e => setNickname(e.target.value)}/>\n        </NickNameWrapper>\n         <NewGameWrapper>\n            <div>\n              <Button id=\"newgame\" size=\"lg\" onClick={() => handleGenerate()}>Start New Game </Button>\n            </div>\n         </NewGameWrapper>\n          <JoinGameWrapper>\n            <h3>\n             -OR-\n            </h3>\n            <h3>\n             Join Existing Game\n            </h3>\n          <FormControl size=\"lg\" type=\"text\" id=\"roomcode\" placeholder=\"Room Code\" onChange={(e) => setId(e.target.value)}/>\n            <div>\n              <Button id=\"joingame\" onClick={() => handleJoinGame()}> Join </Button>\n            </div>\n          </JoinGameWrapper>\n        </LobbyWrapper>\n    </div> \n  )\n  else return (\n    <div className='App container'>\n      <LobbyWrapper>\n        <PlayerHeader>\n           {nickname}\n        </PlayerHeader>\n      {admin && <AdminHeader> game admin </AdminHeader>}\n          {renderStages(gameState)}\n      </LobbyWrapper>\n    </div>\n  );\n}\n\nconst PlayerHeader = styled.div`\n    text-align: right;\n    opacity: 0.6\n    font-size: 14px;\n    font-weight: 400;\n`\n\nconst AdminHeader = styled.div`\n    text-align: right;\n    opacity: 0.6;\n    font-size: 10px;\n    font-weight: bold;\n`\n\nconst LobbyWrapper = styled.div`\n    margin: auto;\n    width: 60vw;\n`\n\nconst NewGameWrapper = styled.div`\n    margin: 15px;\n`\n\nconst NickNameWrapper = styled.div`\n    margin: 15px;\n`\n\nconst JoinGameWrapper = styled.div`\n    margin: 15px;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  MAX_ATTACHMENT_SIZE: 5000000,\n  STRIPE_KEY: \"pk_test_51GxKZKCj77DIADOKg9k7qRz8el0pbDovgOKCiPXCgGUBt51HrgVCXNSQr21cxfRvSe2xJDwIXYPkL8nyBFOj0IDD00dI772GaY\",\n  s3: {\n    REGION: \"us-east-2\",\n    BUCKET: \"lucas-notes-app-api-prod-serverlessdeploymentbuck-2xum7rvze07h\"\n  },\n  apiGateway: {\n    REGION: \"us-east-2\",\n    URL: \"https://l3dw5okdd8.execute-api.us-east-2.amazonaws.com/prod\"\n  },\n  cognito: {\n    REGION: \"us-east-2\",\n    USER_POOL_ID: \"us-east-2_d5pm40iuk\",\n    APP_CLIENT_ID: \"3iopfdiuouqsfbel4c4799as2i\",\n    IDENTITY_POOL_ID: \"us-east-2:e3c4687b-ca4a-43b8-baf4-ff13106c0c8a\"\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport {Amplify} from 'aws-amplify';\nimport config from './config';\n\n\nAmplify.configure({\n  Auth: {\n    mandatorySignIn: true,\n    region: config.cognito.REGION,\n    userPoolId: config.cognito.USER_POOL_ID,\n    identityPoolId: config.cognito.IDENTITY_POOL_ID,\n    userPoolWebClientId: config.cognito.APP_CLIENT_ID\n  },\n  Storage: {\n    region: config.s3.REGION,\n    bucket: config.s3.BUCKET,\n    identityPoolId: config.cognito.IDENTITY_POOL_ID\n  },\n  API: {\n    endpoints: [\n      {\n        name: \"notes\",\n        endpoint: config.apiGateway.URL,\n        region: config.apiGateway.REGION\n      },\n    ]\n  }\n});\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}